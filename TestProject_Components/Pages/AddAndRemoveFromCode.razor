@page "/modification_from_code"
<SourceCodeLink Repository="Blazor.Diagrams" Page="@(nameof(AddAndRemoveFromCode))" />

<Diagram>
    <Nodes>
        @foreach (var node in nodes)
        {
            <Node Id="@node.Id" X="node.X" XChanged="(x) => { node.X = x; no_implicit_render = true; }" Y="node.Y" YChanged="(y) => { node.Y = y; no_implicit_render = true; }" Type="@node.Type">
                <div style="min-width:4em; min-height:1em">@node.Id.Substring(0, 6)</div>
            </Node>
        }
    </Nodes>
    <Links>
        @foreach (var link in links)
        {
            <Link Source="@link.Source" Target="@link.Target" />
        }
    </Links>
    <AutoLayoutSettings @ref="auto_layout" Algorithm="Algorithm.TreeVertical" />
    <OverviewSettings Position="Position.BottomRight" ViewableAreaBorderColor="green" ViewableAreaFillColor="white"
                      BackgroundColor="#DDDDDD" ViewableAreaBorderWidth="1" FullBorder="true" />
</Diagram>

<button @onclick="() => { nodes.Add(new MyNode { Id = Guid.NewGuid().ToString(), X = 100, Y = 100, Type = NodeType.Rectangle }); run_auto_layout = true; }">Add rectangle</button>
<button @onclick="() => { nodes.Add(new MyNode { Id = Guid.NewGuid().ToString(), X = 100, Y = 100, Type = NodeType.Ellipse }); run_auto_layout = true;}">Add ellipse</button>
<button @onclick="() => { if (nodes.Any()) { nodes.RemoveAt(0); } run_auto_layout = true; }">Remove first node</button>
<button @onclick="() => { if (nodes.Count < 2) { return; } var rnd = new Random(); var source = nodes.OrderBy(_ => rnd.NextDouble()).First(); var target = nodes.Except(new[] { source }).OrderBy(_ => rnd.NextDouble()).First(); links.Add(new LinkData { Source = new NodeAnchor { NodeId = source.Id }, Target = new NodeAnchor { NodeId = target.Id } }); run_auto_layout = true; }">Add random link</button>
<button @onclick="() => { if (links.Any()) { links.RemoveAt(0); } run_auto_layout = true; }">Remove first link</button>

@code {
    private AutoLayoutSettings auto_layout;
    private bool run_auto_layout;
    class MyNode
    {
        public string Id { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public NodeType Type { get; set; }
    }
    private List<MyNode> nodes = new List<MyNode>
    {
    };
    private List<LinkData> links = new List<LinkData>
    {
    };
    private bool no_implicit_render;
    protected override bool ShouldRender()
    {
        if (no_implicit_render)
        {
            no_implicit_render = false;
            return false;
        }
        return base.ShouldRender();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (run_auto_layout)
        {
            auto_layout.Run();
            run_auto_layout = false;
        }
    }
}
